const fs = require('fs');
const path = require('path');
const lame = require('node-lame').Lame;

// –ü—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä WAV —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
function generateBeep(frequency, duration, volume = 0.3, sampleRate = 44100) {
    const samples = Math.floor(sampleRate * duration);
    const buffer = Buffer.alloc(44 + samples * 2); // WAV header + 16-bit samples
    
    // WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
    buffer.write('RIFF', 0);
    buffer.writeUInt32LE(36 + samples * 2, 4);
    buffer.write('WAVE', 8);
    buffer.write('fmt ', 12);
    buffer.writeUInt32LE(16, 16); // fmt chunk size
    buffer.writeUInt16LE(1, 20);  // PCM
    buffer.writeUInt16LE(1, 22);  // mono
    buffer.writeUInt32LE(sampleRate, 24);
    buffer.writeUInt32LE(sampleRate * 2, 28); // byte rate
    buffer.writeUInt16LE(2, 32);  // block align
    buffer.writeUInt16LE(16, 34); // bits per sample
    buffer.write('data', 36);
    buffer.writeUInt32LE(samples * 2, 40);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω—É —Ö–≤–∏–ª—é
    for (let i = 0; i < samples; i++) {
        const t = i / sampleRate;
        const amplitude = Math.sin(2 * Math.PI * frequency * t) * volume;
        const sample = Math.round(amplitude * 32767);
        buffer.writeInt16LE(sample, 44 + i * 2);
    }
    
    return buffer;
}

function generateComplexSound(frequencies, durations, volume = 0.3) {
    const sampleRate = 44100;
    let totalSamples = 0;
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–º–ø–ª—ñ–≤
    durations.forEach(dur => {
        totalSamples += Math.floor(sampleRate * dur);
    });
    
    const buffer = Buffer.alloc(44 + totalSamples * 2);
    
    // WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
    buffer.write('RIFF', 0);
    buffer.writeUInt32LE(36 + totalSamples * 2, 4);
    buffer.write('WAVE', 8);
    buffer.write('fmt ', 12);
    buffer.writeUInt32LE(16, 16);
    buffer.writeUInt16LE(1, 20);
    buffer.writeUInt16LE(1, 22);
    buffer.writeUInt32LE(sampleRate, 24);
    buffer.writeUInt32LE(sampleRate * 2, 28);
    buffer.writeUInt16LE(2, 32);
    buffer.writeUInt16LE(16, 34);
    buffer.write('data', 36);
    buffer.writeUInt32LE(totalSamples * 2, 40);
    
    let offset = 0;
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–∂–Ω—É –Ω–æ—Ç—É
    for (let i = 0; i < frequencies.length; i++) {
        const freq = frequencies[i];
        const dur = durations[i];
        const samples = Math.floor(sampleRate * dur);
        
        for (let j = 0; j < samples; j++) {
            const t = j / sampleRate;
            const fade = Math.min(1, Math.min(j / (sampleRate * 0.05), (samples - j) / (sampleRate * 0.05))); // fade in/out
            const amplitude = Math.sin(2 * Math.PI * freq * t) * volume * fade;
            const sample = Math.round(amplitude * 32767);
            buffer.writeInt16LE(sample, 44 + (offset + j) * 2);
        }
        
        offset += samples;
    }
    
    return buffer;
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–≤—É–∫—ñ–≤
const soundsDir = path.join(__dirname, 'public', 'sounds');
if (!fs.existsSync(soundsDir)) {
    fs.mkdirSync(soundsDir, { recursive: true });
}

console.log('–ì–µ–Ω–µ—Ä—É—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ MP3 –∑–≤—É–∫–∏...');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó WAV –≤ MP3
async function convertToMp3(wavBuffer, outputPath) {
    const tempWavPath = path.join(__dirname, 'temp.wav');
    
    try {
        // –ó–∞–ø–∏—Å—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π WAV —Ñ–∞–π–ª
        fs.writeFileSync(tempWavPath, wavBuffer);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ MP3
        const encoder = new lame({
            output: outputPath,
            bitrate: 128,
            quality: 2
        }).setFile(tempWavPath);
        
        await encoder.encode();
        
        // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        if (fs.existsSync(tempWavPath)) {
            fs.unlinkSync(tempWavPath);
        }
        
        return true;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ MP3:', error);
        // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        if (fs.existsSync(tempWavPath)) {
            fs.unlinkSync(tempWavPath);
        }
        return false;
    }
}

async function generateSounds() {
    try {
        console.log('–ì–µ–Ω–µ—Ä—É—î–º–æ WAV —Ñ–∞–π–ª–∏...');
        
        // –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–Ω–∞—Ç - –ø—Ä–æ—Å—Ç–∏–π ding
        const tinySound = generateBeep(800, 0.3, 0.3);
        console.log('–ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ tiny-donation –≤ MP3...');
        await convertToMp3(tinySound, path.join(soundsDir, 'tiny-donation.mp3'));
        console.log('‚úÖ tiny-donation.mp3 —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        
        // –°–µ—Ä–µ–¥–Ω—ñ–π –¥–æ–Ω–∞—Ç - –ø–æ–¥–≤—ñ–π–Ω–∏–π ding
        const smallSound = generateComplexSound([600, 800], [0.2, 0.3], 0.4);
        console.log('–ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ small-donation –≤ MP3...');
        await convertToMp3(smallSound, path.join(soundsDir, 'small-donation.mp3'));
        console.log('‚úÖ small-donation.mp3 —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        
        // –í–µ–ª–∏–∫–∏–π –¥–æ–Ω–∞—Ç - –º–µ–ª–æ–¥—ñ—è C-E-G
        const mediumSound = generateComplexSound([523, 659, 784], [0.3, 0.3, 0.4], 0.5);
        console.log('–ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ medium-donation –≤ MP3...');
        await convertToMp3(mediumSound, path.join(soundsDir, 'medium-donation.mp3'));
        console.log('‚úÖ medium-donation.mp3 —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        
        // –ú–∞–∫—Å—ñ –¥–æ–Ω–∞—Ç - —Ñ–∞–Ω—Ñ–∞—Ä–∏ C-E-G-C
        const bigSound = generateComplexSound([523, 659, 784, 1047], [0.3, 0.3, 0.3, 0.6], 0.6);
        console.log('–ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ big-donation –≤ MP3...');
        await convertToMp3(bigSound, path.join(soundsDir, 'big-donation.mp3'));
        console.log('‚úÖ big-donation.mp3 —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    
        console.log('\nüéµ –í—Å—ñ MP3 –∑–≤—É–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('–§–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —É –ø–∞–ø—Ü—ñ public/sounds/');
        
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ WAV —Ñ–∞–π–ª–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
        const wavFiles = ['tiny-donation.wav', 'small-donation.wav', 'medium-donation.wav', 'big-donation.wav'];
        wavFiles.forEach(file => {
            const wavPath = path.join(soundsDir, file);
            if (fs.existsSync(wavPath)) {
                fs.unlinkSync(wavPath);
                console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π ${file}`);
            }
        });
        
        console.log('\n–î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:');
        console.log('1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: node server.js');
        console.log('2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ: http://localhost:3000/obs');
        console.log('3. –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ üîä —Ç–∞ —Ç–µ—Å—Ç—É–π—Ç–µ –∑–≤—É–∫–∏');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—É–∫—ñ–≤:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
generateSounds();